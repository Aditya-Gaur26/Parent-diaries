openapi: 3.0.0
info:
  title: Parent Diaries API
  version: 1.0.0
  description: API documentation for the Parent Diaries
servers:
  - url: http://localhost:{port}
    description: Local development server
    variables:
      port:
        default: '5000'
        description: The API server port. Defaults to 5000 if PORT env variable is not set

tags:
  - name: System
    description: Basic system health check endpoints
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Profile
    description: User profile and notification management
  - name: Children
    description: Child information management
  - name: Subscription
    description: Subscription plan management
  - name: Report
    description: Issue reporting system
  - name: Social
    description: Social and community features
  - name: Admin
    description: Administrator-only endpoints for managing doctors and reports

paths:
  # System Routes
  /:
    get:
      tags:
        - System
      summary: Backend Connection Tester
      responses:
        '200':
          description: Server is operational
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  # Test Route
  /api/users:
    get:
      tags:
        - System
      summary: Test route
      responses:
        '200':
          description: Test response
          content:
            text/plain:
              schema:
                type: string
                example: User route is working!

  # Authentication Routes
  /api/users/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input data

  /api/users/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /api/users/verify_email:
    post:
      tags:
        - Authentication
      summary: Verify user email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Email verified successfully

  /api/users/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Password reset email sent

  /api/users/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                resetCode:
                  type: string
                newPassword:
                  type: string
              required:
                - email
                - resetCode
                - newPassword
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid or expired reset code
        '404':
          description: User not found
        '500':
          description: Server error

  /api/users/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"
        '401':
          description: Unauthorized - Invalid or expired token

  # Profile Routes
  /api/users/profile:
    get:
      tags:
        - Profile
      summary: Get user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  email:
                    type: string
                  mobile_number:
                    type: string
                  dob:
                    type: string
                    format: date
                  bio:
                    type: string
                  role:
                    type: string
                  specialization:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    
    put:
      tags:
        - Profile
      summary: Update user profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                mobile_number:
                  type: string
                  pattern: '^\+?[\d\s-]{10,}$'
                  description: Must be at least 10 digits with optional + prefix
                dob:
                  type: string
                  pattern: '^(\d{2})/(\d{2})/(\d{4})$'
                  description: Date in DD/MM/YYYY format
                bio:
                  type: string
                specialization:
                  type: string
                  description: Required only for doctors
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile updated successfully"
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      mobile_number:
                        type: string
                      dob:
                        type: string
                      bio:
                        type: string
                      specialization:
                        type: string
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
        '500':
          description: Server error

  /api/users/notification-settings:
    post:
      tags:
        - Profile
      summary: Update notification settings
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pushEnabled
                - emailEnabled
                - notificationTypes
              properties:
                pushEnabled:
                  type: boolean
                  description: Enable/disable push notifications
                emailEnabled:
                  type: boolean
                  description: Enable/disable email notifications
                notificationTypes:
                  type: object
                  properties:
                    newMessages:
                      type: boolean
                      default: true
                    reminders:
                      type: boolean
                      default: true
                    updates:
                      type: boolean
                      default: true
                    marketingEmails:
                      type: boolean
                      default: false
                    activitySummary:
                      type: boolean
                      default: true
                  description: Object containing notification type preferences
      responses:
        '200':
          description: Notification settings updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Notification settings updated successfully"
                  notificationSettings:
                    type: object
                    properties:
                      pushEnabled:
                        type: boolean
                      emailEnabled:
                        type: boolean
                      notificationTypes:
                        type: object
                        properties:
                          newMessages:
                            type: boolean
                          reminders:
                            type: boolean
                          updates:
                            type: boolean
                          marketingEmails:
                            type: boolean
                          activitySummary:
                            type: boolean
        '400':
          description: Incomplete notification settings provided
        '404':
          description: User not found
        '500':
          description: Server error

  /api/users/children:
    post:
      tags:
        - Children
      summary: Add a new child
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - dateOfBirth
                - gender
              properties:
                name:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
                gender:
                  type: string
                  enum: [Male, Female, Other]
                bloodGroup:
                  type: string
                  enum: [A+, A-, B+, B-, AB+, AB-, O+, O-]
                medicalConditions:
                  type: array
                  items:
                    type: string
                allergies:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Child added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  child:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      dateOfBirth:
                        type: string
                        format: date
                      gender:
                        type: string
                      bloodGroup:
                        type: string
                      medicalConditions:
                        type: array
                        items:
                          type: string
                      allergies:
                        type: array
                        items:
                          type: string
    get:
      tags:
        - Children
      summary: Get all children
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of children retrieved successfully

  /api/users/children/{childId}:
    put:
      tags:
        - Children
      summary: Update child information
      security:
        - BearerAuth: []
      parameters:
        - name: childId
          in: path
          required: true
          schema:
            type: string
          description: ID of the child to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
                gender:
                  type: string
                  enum: [Male, Female, Other]
                bloodGroup:
                  type: string
                  enum: [A+, A-, B+, B-, AB+, AB-, O-, O+]
                medicalConditions:
                  type: array
                  items:
                    type: string
                allergies:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Child information updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Child updated successfully"
                  child:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      dateOfBirth:
                        type: string
                        format: date
                      gender:
                        type: string
                      bloodGroup:
                        type: string
                      medicalConditions:
                        type: array
                        items:
                          type: string
                      allergies:
                        type: array
                        items:
                          type: string
        '400':
          description: Invalid input data
        '404':
          description: User or child not found
        '500':
          description: Server error
    delete:
      tags:
        - Children
      summary: Remove a child
      security:
        - BearerAuth: []
      parameters:
        - name: childId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Child removed successfully

  /api/users/get-subscription:
    get:
      tags:
        - Subscription
      summary: Get user subscription details
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Subscription details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscription:
                    type: object
                    properties:
                      userId:
                        type: string
                      type:
                        type: string
                        enum: ['free', 'premium']
                      startDate:
                        type: string
                        format: date-time
                      expiryDate:
                        type: string
                        format: date-time
                      autoRenew:
                        type: boolean
                      paymentMethod:
                        type: object
                        properties:
                          cardType:
                            type: string
                          lastFourDigits:
                            type: string
                      transactionHistory:
                        type: array
                        items:
                          type: object
                          properties:
                            amount:
                              type: number
                            date:
                              type: string
                              format: date-time
                            status:
                              type: string
                              enum: ['successful', 'failed', 'refunded']
                            description:
                              type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving subscription information"
                  error:
                    type: string

  /api/users/update-subscription:
    post:
      tags:
        - Subscription
      summary: Update subscription status
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: ['free', 'premium']
                  description: Subscription type to update to
                autoRenew:
                  type: boolean
                  description: Whether to auto-renew the subscription
                paymentMethod:
                  type: object
                  properties:
                    cardType:
                      type: string
                      description: Type of payment card
                    lastFourDigits:
                      type: string
                      pattern: '^[0-9]{4}$'
                      description: Last 4 digits of the payment card
      responses:
        '200':
          description: Subscription updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Subscription updated successfully"
                  subscription:
                    type: object
                    properties:
                      userId:
                        type: string
                      type:
                        type: string
                        enum: ['free', 'premium']
                      startDate:
                        type: string
                        format: date-time
                      expiryDate:
                        type: string
                        format: date-time
                      autoRenew:
                        type: boolean
                      paymentMethod:
                        type: object
                        properties:
                          cardType:
                            type: string
                          lastFourDigits:
                            type: string
                      transactionHistory:
                        type: array
                        items:
                          type: object
                          properties:
                            amount:
                              type: number
                            date:
                              type: string
                              format: date-time
                            status:
                              type: string
                              enum: ['successful', 'failed', 'refunded']
                            description:
                              type: string
        '400':
          description: Invalid input parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid subscription type"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating subscription"
                  error:
                    type: string

  /api/users/report-issue:
    post:
      tags:
        - Report
      summary: Report an issue
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Issue reported successfully

  /api/users/parents-for-chat:
    get:
      tags:
        - Social
      summary: Get list of parents available for chat
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of parents retrieved successfully

  # Admin Routes
  /api/admin:
    get:
      tags:
        - Admin
      summary: Test admin route
      responses:
        '200':
          description: Admin route health check
          content:
            text/plain:
              schema:
                type: string
                example: Admin route is working!

  /api/admin/register-doctor:
    post:
      tags:
        - Admin
      summary: Register a new doctor account
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                mobile_number:
                  type: string
                dob:
                  type: string
                  description: Date in DD-MM-YYYY, DD/MM/YYYY, or YYYY-MM-DD format
                specialization:
                  type: string
                qualification:
                  type: string
                licenseNumber:
                  type: string
                experience:
                  type: string
                hospitalAffiliation:
                  type: string
                appointmentFee:
                  type: number
                bio:
                  type: string
                isApproved:
                  type: boolean
                  default: false
      responses:
        '201':
          description: Doctor registered successfully
        '400':
          description: Invalid input or doctor already exists
        '401':
          description: Unauthorized - Admin access required

  /api/admin/doctors:
    get:
      tags:
        - Admin
      summary: Get all registered doctors
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of all doctors
        '401':
          description: Unauthorized - Admin access required

  /api/admin/doctors/{doctorId}:
    get:
      tags:
        - Admin
      summary: Get specific doctor details
      security:
        - BearerAuth: []
      parameters:
        - name: doctorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Doctor details retrieved successfully
        '404':
          description: Doctor not found
    put:
      tags:
        - Admin
      summary: Update doctor details
      security:
        - BearerAuth: []
      parameters:
        - name: doctorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isApproved:
                  type: boolean
                name:
                  type: string
                specialization:
                  type: string
                # Other updateable fields...
      responses:
        '200':
          description: Doctor updated successfully
        '404':
          description: Doctor not found
    delete:
      tags:
        - Admin
      summary: Delete a doctor
      security:
        - BearerAuth: []
      parameters:
        - name: doctorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Doctor deleted successfully
        '404':
          description: Doctor not found

  /api/admin/reports:
    get:
      tags:
        - Admin
      summary: Get all user reports
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [Open, In Progress, Resolved, Closed]
        - name: category
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Reports retrieved successfully

  /api/admin/reports/{reportId}:
    get:
      tags:
        - Admin
      summary: Get specific report details
      security:
        - BearerAuth: []
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Report details retrieved successfully
        '404':
          description: Report not found

  /api/admin/reports/{reportId}/status:
    put:
      tags:
        - Admin
      summary: Update report status
      security:
        - BearerAuth: []
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [Open, In Progress, Resolved, Closed]
      responses:
        '200':
          description: Report status updated successfully
        '404':
          description: Report not found

  /api/admin/reports/{reportId}/reply:
    post:
      tags:
        - Admin
      summary: Reply to a report
      security:
        - BearerAuth: []
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      responses:
        '200':
          description: Reply sent successfully
        '207':
          description: Reply saved but email notification failed
        '404':
          description: Report not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

