openapi: 3.0.0
info:
  title: Parent Diaries API
  version: 1.0.0
  description: API documentation for the Parent Diaries
servers:
  - url: http://localhost:{port}
    description: Local development server
    variables:
      port:
        default: '5000'
        description: The API server port. Defaults to 5000 if PORT env variable is not set

tags:
  - name: System
    description: Basic system health check endpoints
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Profile
    description: User profile and notification management
  - name: Children
    description: Child information management
  - name: Subscription
    description: Subscription plan management
  - name: Report
    description: Issue reporting system
  - name: Social
    description: Social and community features
  - name: Admin
    description: Administrator-only endpoints for managing doctors and reports

paths:
  # System Routes
  /:
    get:
      tags:
        - System
      summary: Landing Page
      responses:
        '200':
          description: Server is operational
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  # Test Route
  /user:
    get:
      tags:
        - System
      summary: Test route
      responses:
        '200':
          description: Test response
          content:
            text/plain:
              schema:
                type: string
                example: User route is working!

  # Authentication Routes
  /user/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input data

  /user/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /user/verify_email:
    post:
      tags:
        - Authentication
      summary: Verify user email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Email verified successfully

  /user/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Password reset email sent

  /user/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password reset successful

  # Profile Routes
  /user/profile:
    get:
      tags:
        - Profile
      summary: Get user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
    put:
      tags:
        - Profile
      summary: Update user profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                bio:
                  type: string
      responses:
        '200':
          description: Profile updated successfully

  /user/notification-settings:
    post:
      tags:
        - Profile
      summary: Update notification settings
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailNotifications:
                  type: boolean
                pushNotifications:
                  type: boolean
      responses:
        '200':
          description: Notification settings updated

  /user/children:
    post:
      tags:
        - Children
      summary: Add a new child
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
      responses:
        '201':
          description: Child added successfully
    get:
      tags:
        - Children
      summary: Get all children
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of children retrieved successfully

  /user/children/{childId}:
    put:
      tags:
        - Children
      summary: Update child information
      security:
        - BearerAuth: []
      parameters:
        - name: childId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
      responses:
        '200':
          description: Child information updated successfully
    delete:
      tags:
        - Children
      summary: Remove a child
      security:
        - BearerAuth: []
      parameters:
        - name: childId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Child removed successfully

  /user/get-subscription:
    get:
      tags:
        - Subscription
      summary: Get user subscription details
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Subscription details retrieved successfully

  /user/update-subscription:
    post:
      tags:
        - Subscription
      summary: Update subscription
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                planId:
                  type: string
      responses:
        '200':
          description: Subscription updated successfully

  /user/report-issue:
    post:
      tags:
        - Report
      summary: Report an issue
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Issue reported successfully

  /user/parents-for-chat:
    get:
      tags:
        - Social
      summary: Get list of parents available for chat
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of parents retrieved successfully

  # Admin Routes
  /api/admin:
    get:
      tags:
        - Admin
      summary: Test admin route
      responses:
        '200':
          description: Admin route health check
          content:
            text/plain:
              schema:
                type: string
                example: Admin route is working!

  /api/admin/register-doctor:
    post:
      tags:
        - Admin
      summary: Register a new doctor account
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                mobile_number:
                  type: string
                dob:
                  type: string
                  description: Date in DD-MM-YYYY, DD/MM/YYYY, or YYYY-MM-DD format
                specialization:
                  type: string
                qualification:
                  type: string
                licenseNumber:
                  type: string
                experience:
                  type: string
                hospitalAffiliation:
                  type: string
                appointmentFee:
                  type: number
                bio:
                  type: string
                isApproved:
                  type: boolean
                  default: false
      responses:
        '201':
          description: Doctor registered successfully
        '400':
          description: Invalid input or doctor already exists
        '401':
          description: Unauthorized - Admin access required

  /api/admin/doctors:
    get:
      tags:
        - Admin
      summary: Get all registered doctors
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of all doctors
        '401':
          description: Unauthorized - Admin access required

  /api/admin/doctors/{doctorId}:
    get:
      tags:
        - Admin
      summary: Get specific doctor details
      security:
        - BearerAuth: []
      parameters:
        - name: doctorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Doctor details retrieved successfully
        '404':
          description: Doctor not found
    put:
      tags:
        - Admin
      summary: Update doctor details
      security:
        - BearerAuth: []
      parameters:
        - name: doctorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isApproved:
                  type: boolean
                name:
                  type: string
                specialization:
                  type: string
                # Other updateable fields...
      responses:
        '200':
          description: Doctor updated successfully
        '404':
          description: Doctor not found
    delete:
      tags:
        - Admin
      summary: Delete a doctor
      security:
        - BearerAuth: []
      parameters:
        - name: doctorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Doctor deleted successfully
        '404':
          description: Doctor not found

  /api/admin/reports:
    get:
      tags:
        - Admin
      summary: Get all user reports
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [Open, In Progress, Resolved, Closed]
        - name: category
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Reports retrieved successfully

  /api/admin/reports/{reportId}:
    get:
      tags:
        - Admin
      summary: Get specific report details
      security:
        - BearerAuth: []
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Report details retrieved successfully
        '404':
          description: Report not found

  /api/admin/reports/{reportId}/status:
    put:
      tags:
        - Admin
      summary: Update report status
      security:
        - BearerAuth: []
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [Open, In Progress, Resolved, Closed]
      responses:
        '200':
          description: Report status updated successfully
        '404':
          description: Report not found

  /api/admin/reports/{reportId}/reply:
    post:
      tags:
        - Admin
      summary: Reply to a report
      security:
        - BearerAuth: []
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      responses:
        '200':
          description: Reply sent successfully
        '207':
          description: Reply saved but email notification failed
        '404':
          description: Report not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

